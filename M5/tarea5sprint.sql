create schema sprint5;

use sprint5;
-- se crea el usuario 'invitado' con la clave 'hola'
create user 'invitado'@'localhost' identified by 'hola';
-- para el usuario 'inivitado' se le concede permiso para crear, eliminar y modificar tablas, insertar registros
-- lo anterior en la BD "sprint5" y todas sus tablas (instruccion .*)
GRANT  CREATE, DELETE, UPDATE, INSERT ON sprint5.* TO 'invitado'@'localhost';
-- la siguiente instruccion muestra los privilegios otorgados
show grants for 'invitado2'@'localhost';

-- MySQL Script generated by MySQL Workbench
-- Thu Sep  1 20:20:20 2022
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
-- USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`cliente`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sprint5`.`cliente` (
  `idcliente` INT NOT NULL,
  `nombre` VARCHAR(45) NOT NULL,
  `apellido` VARCHAR(45) NOT NULL,
  `direccion` VARCHAR(45) NULL,
  `telefono` INT NULL,
  `correo_electronico` VARCHAR(45) NULL,
  PRIMARY KEY (`idcliente`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`producto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sprint5`.`producto` (
  `idproducto` INT NOT NULL,
  `precio` INT NOT NULL,
  `categoria` VARCHAR(45) NOT NULL,
  `color` VARCHAR(45) NOT NULL,
  `stock` INT NOT NULL,
  `cliente_idcliente` INT NOT NULL,
  PRIMARY KEY (`idproducto`),
  INDEX `fk_producto_cliente_idx` (`cliente_idcliente` ASC) VISIBLE,
  CONSTRAINT `fk_producto_cliente`
    FOREIGN KEY (`cliente_idcliente`)
    REFERENCES `sprint5`.`cliente` (`idcliente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`proveedor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sprint5`.`proveedor` (
  `idproveedor` INT NOT NULL,
  `representante_legal` VARCHAR(60) NOT NULL,
  `nombre_corporativo` VARCHAR(45) NOT NULL,
  `telefono1` INT NOT NULL,
  `telefono2` INT NOT NULL,
  `persona_contacto` VARCHAR(45) NOT NULL,
  `categoria` VARCHAR(45) NOT NULL,
  `correo_electronico` VARCHAR(45) NOT NULL,
  `producto_idproducto` INT NOT NULL,
  PRIMARY KEY (`idproveedor`),
  INDEX `fk_proveedor_producto1_idx` (`producto_idproducto` ASC) VISIBLE,
  CONSTRAINT `fk_proveedor_producto1`
    FOREIGN KEY (`producto_idproducto`)
    REFERENCES `sprint5`.`producto` (`idproducto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- se incorpora la tabla venta para implementaciones posteriores
-- -----------------------------------------------------
-- Table `mydb`.`venta`
-- -----------------------------------------------------
-- CREATE TABLE IF NOT EXISTS `mydb`.`venta` (
--  `idventa` INT NOT NULL,
--  `subtotal` INT NOT NULL,
--  `impuesto` INT NOT NULL,
--  `total` INT NOT NULL,
 -- `idpedido_fk` INT NOT NULL,
 -- `vendedor` VARCHAR(45) NULL,
--  PRIMARY KEY (`idventa`))
-- ENGINE = InnoDB;

-- tambien se agrega la tabla pedido , para medir y mejorar en el futuro el desempeño de la entrega de pedidos
-- -----------------------------------------------------
-- Table `mydb`.`pedidio`
-- -----------------------------------------------------
-- CREATE TABLE IF NOT EXISTS `mydb`.`pedidio` (
--  `idpedidio` INT NOT NULL,
--  `nombre_encargado` VARCHAR(45) NOT NULL,
--  `hora_despacho` DATETIME NOT NULL,
--  `hora_entrega` DATETIME NOT NULL,
--  PRIMARY KEY (`idpedidio`))
-- ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
-- 
-- E 1054
-- SET FOREIGN_KEY_CHECKS=0;

select * from cliente;

-- ingreso de 5 clientes
insert into cliente (idcliente, nombre , apellido,direccion,telefono,correo_electronico)
value 
(1, 'Alan','Brito','Calle Los Alerces 100',234567,'alanbrito@entel.com'),
(2, 'Peter','Parker','Calle Las Arañas 230',678549,'spiderman@marvenombrel.com'),
(3, 'Elvis','Tek', 'Avenida Los Asados 567',678543,'reyelvis@gmail.com'),
(4,'Zoila','Cerda','Alameda con la Moneda', 789564,'soylavaca@gmail.conm'),
(5,'Juan','Papero','Las alamos 456',8976544,'juanpapero@hotmail.com');

select * from producto;
-- ingreso de 10 productos
insert into producto (idproducto,precio,categoria,color,stock,cliente_idcliente)
value 
(1,350000,'consola','amarillo',3,1),
(2,95000,'impresora','negro',36,2),
(3,150000,'monitor','blanco',23,3),
(4,60000,'monitor','negro',76,4),
(5,67000,'mouse','rojo',21,5),
(6,80000,'impresora','blanco',18,1),
(7,145000,'impresora','azul',25,2),
(8,123000,'monitor','rojo',12,3),
(9,225000,'consola','negro',34,4),
(10,179000,'impresora','verde',5,5);  

-- ingreso de 5 proveesores
insert into proveedor (idproveedor,representante_legal,nombre_corporativo,telefono1,telefono2,persona_contacto,categoria,correo_electronico,producto_idproducto)
value
(1,'Homero Simpson','Cannon',234567,234568,'Marge Simpson','impresora','homerosimpson@cannon.com',2),
(2,'Moe Zislas','Nintendo',23789,23790,'Barney Gomez','consola','moezislas@nintendo.com',1),
(3,'Montgomery Burns','HP',678906,678907,'Gandulo Smiters','monitor','mrsmith@hp.com', 3),
(4,'Pedro Picapiedra','logitech',567890,567891,'Pablo Marmól','mouse','pedropicapiedra@ligitech.com',5), 
(5,'Bart Simpson','sony',897654,897655,'Lizza Simpson','monitor','elbarto@sony.com', 4);

select * from proveedor;
-- Cuál es la categoría de productos que más se repite.
SELECT categoria, count(categoria) AS `value_occurrence` from producto group by categoria 
ORDER BY `value_occurrence` DESC
LIMIT 1;

-- Cuáles son los productos con mayor stock 
select idproducto,stock from producto where stock = (select max(stock) from producto);

-- Qué color de producto es más común en nuestra tienda
SELECT color, count(color) AS `value_occurrence` from producto group by color
ORDER BY `value_occurrence` DESC
LIMIT 1;


-- entrega el menor stock pero no el id ni el nombre
select p.idproveedor as identificador, p.nombre_corporativo as empresa, min(pr.stock) as stock from proveedor p join producto pr where p.producto_idproducto = pr.idproducto;

-- E 1175
-- SET SQL_SAFE_UPDATES = 0;

-- Cambien la categoría de productos más popular por ‘Electrónica y computación’.

update producto inner join (
SELECT count(categoria),categoria from producto GROUP BY categoria
order by 1 desc limit 1) b on producto.categoria = b.categoria
set producto.categoria = 'Electrónica y computación';

select * from producto;
